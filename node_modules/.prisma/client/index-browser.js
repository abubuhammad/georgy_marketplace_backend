
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  role: 'role',
  avatar: 'avatar',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  identityVerified: 'identityVerified',
  addressVerified: 'addressVerified',
  isActive: 'isActive',
  isSuspended: 'isSuspended',
  suspendedAt: 'suspendedAt',
  isBanned: 'isBanned',
  bannedAt: 'bannedAt',
  isFrozen: 'isFrozen',
  frozenAt: 'frozenAt',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  verifiedDate: 'verifiedDate',
  lastLoginAt: 'lastLoginAt',
  specializations: 'specializations',
  activeDisputes: 'activeDisputes',
  storeCredit: 'storeCredit',
  moderationStats: 'moderationStats',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.SellerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  businessName: 'businessName',
  businessDescription: 'businessDescription',
  businessAddress: 'businessAddress',
  businessPhone: 'businessPhone',
  businessEmail: 'businessEmail',
  logo: 'logo',
  rating: 'rating',
  reviewCount: 'reviewCount',
  isVerified: 'isVerified',
  documents: 'documents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  title: 'title',
  productName: 'productName',
  description: 'description',
  price: 'price',
  originalPrice: 'originalPrice',
  categoryId: 'categoryId',
  subcategoryId: 'subcategoryId',
  brand: 'brand',
  condition: 'condition',
  images: 'images',
  sellerId: 'sellerId',
  featured: 'featured',
  status: 'status',
  isActive: 'isActive',
  location: 'location',
  locationCity: 'locationCity',
  locationState: 'locationState',
  locationCountry: 'locationCountry',
  isNegotiable: 'isNegotiable',
  viewCount: 'viewCount',
  rating: 'rating',
  reviewCount: 'reviewCount',
  dynamicFields: 'dynamicFields',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  buyerId: 'buyerId',
  sellerId: 'sellerId',
  quantity: 'quantity',
  totalAmount: 'totalAmount',
  status: 'status',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  shippingAddress: 'shippingAddress',
  deliveryDate: 'deliveryDate',
  expectedDeliveryDate: 'expectedDeliveryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefundScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  reason: 'reason',
  description: 'description',
  amount: 'amount',
  status: 'status',
  requestedBy: 'requestedBy',
  processedBy: 'processedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  userId: 'userId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.ListingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  price: 'price',
  negotiable: 'negotiable',
  condition: 'condition',
  images: 'images',
  location: 'location',
  userId: 'userId',
  featured: 'featured',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  propertyType: 'propertyType',
  price: 'price',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  area: 'area',
  location: 'location',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  images: 'images',
  virtualTour: 'virtualTour',
  amenities: 'amenities',
  ownerId: 'ownerId',
  agentId: 'agentId',
  featured: 'featured',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyViewingScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  viewerId: 'viewerId',
  agentId: 'agentId',
  scheduledAt: 'scheduledAt',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  company: 'company',
  location: 'location',
  type: 'type',
  salary: 'salary',
  salaryType: 'salaryType',
  requirements: 'requirements',
  benefits: 'benefits',
  employerId: 'employerId',
  featured: 'featured',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobApplicationScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  applicantId: 'applicantId',
  coverLetter: 'coverLetter',
  resume: 'resume',
  status: 'status',
  score: 'score',
  notes: 'notes',
  appliedAt: 'appliedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ArtisanProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  businessName: 'businessName',
  category: 'category',
  skills: 'skills',
  experience: 'experience',
  hourlyRate: 'hourlyRate',
  location: 'location',
  latitude: 'latitude',
  longitude: 'longitude',
  portfolio: 'portfolio',
  bio: 'bio',
  verified: 'verified',
  rating: 'rating',
  totalJobs: 'totalJobs',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceRequestScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  artisanId: 'artisanId',
  category: 'category',
  title: 'title',
  description: 'description',
  location: 'location',
  latitude: 'latitude',
  longitude: 'longitude',
  budget: 'budget',
  urgency: 'urgency',
  images: 'images',
  status: 'status',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceQuoteScalarFieldEnum = {
  id: 'id',
  serviceRequestId: 'serviceRequestId',
  artisanId: 'artisanId',
  amount: 'amount',
  description: 'description',
  estimatedDuration: 'estimatedDuration',
  materials: 'materials',
  status: 'status',
  validUntil: 'validUntil',
  createdAt: 'createdAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  serviceRequestId: 'serviceRequestId',
  customerId: 'customerId',
  artisanId: 'artisanId',
  status: 'status',
  lastMessageAt: 'lastMessageAt',
  createdAt: 'createdAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  senderId: 'senderId',
  recipientId: 'recipientId',
  content: 'content',
  messageType: 'messageType',
  fileUrl: 'fileUrl',
  readAt: 'readAt',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.LegalDocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  version: 'version',
  title: 'title',
  content: 'content',
  language: 'language',
  jurisdiction: 'jurisdiction',
  effectiveDate: 'effectiveDate',
  createdBy: 'createdBy',
  modifiedBy: 'modifiedBy',
  lastModified: 'lastModified',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserConsentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  documentId: 'documentId',
  documentVersion: 'documentVersion',
  documentType: 'documentType',
  consentGiven: 'consentGiven',
  consentDate: 'consentDate',
  consentMethod: 'consentMethod',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  withdrawnAt: 'withdrawnAt',
  method: 'method'
};

exports.Prisma.GDPRRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  requestType: 'requestType',
  status: 'status',
  reason: 'reason',
  requestData: 'requestData',
  processedBy: 'processedBy',
  processedAt: 'processedAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPrivacySettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  profileVisible: 'profileVisible',
  emailVisible: 'emailVisible',
  phoneVisible: 'phoneVisible',
  locationVisible: 'locationVisible',
  activityVisible: 'activityVisible',
  marketingConsent: 'marketingConsent',
  analyticsConsent: 'analyticsConsent',
  thirdPartySharing: 'thirdPartySharing',
  dataRetentionConsent: 'dataRetentionConsent',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  identityVerified: 'identityVerified',
  phoneVerified: 'phoneVerified',
  emailVerified: 'emailVerified',
  addressVerified: 'addressVerified',
  documentsVerified: 'documentsVerified',
  backgroundCheck: 'backgroundCheck',
  verificationScore: 'verificationScore',
  lastVerifiedAt: 'lastVerifiedAt',
  verificationNotes: 'verificationNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSafetyProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  safetyScore: 'safetyScore',
  riskLevel: 'riskLevel',
  emergencyContact: 'emergencyContact',
  safetyPreferences: 'safetyPreferences',
  blockedUsers: 'blockedUsers',
  lastSafetyUpdate: 'lastSafetyUpdate',
  safetyAlerts: 'safetyAlerts',
  locationSharing: 'locationSharing',
  meetingPreferences: 'meetingPreferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SafetyIncidentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  incidentType: 'incidentType',
  severity: 'severity',
  status: 'status',
  description: 'description',
  evidence: 'evidence',
  location: 'location',
  reportedBy: 'reportedBy',
  assignedTo: 'assignedTo',
  investigatedBy: 'investigatedBy',
  resolvedBy: 'resolvedBy',
  resolution: 'resolution',
  resolvedAt: 'resolvedAt',
  followUpDate: 'followUpDate',
  affectedUsers: 'affectedUsers',
  title: 'title',
  tags: 'tags',
  estimatedResolution: 'estimatedResolution',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  reportedUserId: 'reportedUserId',
  reportedUser: 'reportedUser',
  category: 'category',
  reason: 'reason',
  description: 'description',
  reportType: 'reportType',
  evidence: 'evidence',
  status: 'status',
  priority: 'priority',
  assignedTo: 'assignedTo',
  resolution: 'resolution',
  actionTaken: 'actionTaken',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityAuditScalarFieldEnum = {
  id: 'id',
  auditType: 'auditType',
  status: 'status',
  severity: 'severity',
  category: 'category',
  description: 'description',
  findings: 'findings',
  recommendations: 'recommendations',
  remediation: 'remediation',
  targetSystem: 'targetSystem',
  conductedBy: 'conductedBy',
  conductedAt: 'conductedAt',
  assignedTo: 'assignedTo',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  nextAuditDate: 'nextAuditDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityIncidentScalarFieldEnum = {
  id: 'id',
  incidentType: 'incidentType',
  title: 'title',
  severity: 'severity',
  status: 'status',
  description: 'description',
  affectedSystems: 'affectedSystems',
  affectedUsers: 'affectedUsers',
  reportedBy: 'reportedBy',
  detectedAt: 'detectedAt',
  containedAt: 'containedAt',
  resolvedAt: 'resolvedAt',
  assignedTo: 'assignedTo',
  response: 'response',
  lessons: 'lessons',
  publicNotice: 'publicNotice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccessControlScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  resource: 'resource',
  permission: 'permission',
  action: 'action',
  granted: 'granted',
  isActive: 'isActive',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  expiresAt: 'expiresAt',
  reason: 'reason',
  conditions: 'conditions',
  lastUsedAt: 'lastUsedAt',
  usageCount: 'usageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DisputeScalarFieldEnum = {
  id: 'id',
  disputeId: 'disputeId',
  disputeNumber: 'disputeNumber',
  type: 'type',
  disputeType: 'disputeType',
  status: 'status',
  priority: 'priority',
  subject: 'subject',
  description: 'description',
  amount: 'amount',
  currency: 'currency',
  claimantId: 'claimantId',
  complainantId: 'complainantId',
  respondentId: 'respondentId',
  assignedTo: 'assignedTo',
  assignedMediatorId: 'assignedMediatorId',
  category: 'category',
  subcategory: 'subcategory',
  relatedOrder: 'relatedOrder',
  orderId: 'orderId',
  relatedItem: 'relatedItem',
  evidence: 'evidence',
  timeline: 'timeline',
  resolution: 'resolution',
  compensation: 'compensation',
  dueDate: 'dueDate',
  resolvedAt: 'resolvedAt',
  escalatedAt: 'escalatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DisputeMessageScalarFieldEnum = {
  id: 'id',
  disputeId: 'disputeId',
  senderId: 'senderId',
  senderRole: 'senderRole',
  messageType: 'messageType',
  message: 'message',
  content: 'content',
  attachments: 'attachments',
  isInternal: 'isInternal',
  readBy: 'readBy',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.DisputeMediationScalarFieldEnum = {
  id: 'id',
  disputeId: 'disputeId',
  mediatorId: 'mediatorId',
  scheduledAt: 'scheduledAt',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  status: 'status',
  type: 'type',
  meetingLink: 'meetingLink',
  notes: 'notes',
  outcome: 'outcome',
  agreementTerms: 'agreementTerms',
  nextSteps: 'nextSteps',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentModerationScalarFieldEnum = {
  id: 'id',
  contentType: 'contentType',
  contentId: 'contentId',
  authorId: 'authorId',
  status: 'status',
  moderationType: 'moderationType',
  flaggedReason: 'flaggedReason',
  severity: 'severity',
  confidence: 'confidence',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  action: 'action',
  actionReason: 'actionReason',
  appeal: 'appeal',
  appealReason: 'appealReason',
  appealedAt: 'appealedAt',
  appealReviewed: 'appealReviewed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModerationRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  type: 'type',
  conditions: 'conditions',
  actions: 'actions',
  severity: 'severity',
  isActive: 'isActive',
  priority: 'priority',
  createdBy: 'createdBy',
  lastUsed: 'lastUsed',
  usageCount: 'usageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModerationQueueScalarFieldEnum = {
  id: 'id',
  contentType: 'contentType',
  contentId: 'contentId',
  contentItemId: 'contentItemId',
  authorId: 'authorId',
  priority: 'priority',
  assignedTo: 'assignedTo',
  status: 'status',
  flaggedBy: 'flaggedBy',
  reason: 'reason',
  content: 'content',
  metadata: 'metadata',
  assignedAt: 'assignedAt',
  reviewedAt: 'reviewedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserTrustProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  trustScore: 'trustScore',
  trustLevel: 'trustLevel',
  verificationBadges: 'verificationBadges',
  reputationScore: 'reputationScore',
  reliabilityScore: 'reliabilityScore',
  activityScore: 'activityScore',
  socialScore: 'socialScore',
  profileStrength: 'profileStrength',
  riskLevel: 'riskLevel',
  riskFlags: 'riskFlags',
  accountAge: 'accountAge',
  lastActivity: 'lastActivity',
  profileCompletion: 'profileCompletion',
  transactionCount: 'transactionCount',
  disputeRate: 'disputeRate',
  positiveReviews: 'positiveReviews',
  negativeReviews: 'negativeReviews',
  endorsementCount: 'endorsementCount',
  warnings: 'warnings',
  restrictions: 'restrictions',
  notes: 'notes',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserEndorsementScalarFieldEnum = {
  id: 'id',
  endorserId: 'endorserId',
  endorseeId: 'endorseeId',
  category: 'category',
  rating: 'rating',
  comment: 'comment',
  relatedOrder: 'relatedOrder',
  verified: 'verified',
  helpful: 'helpful',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrustAlertScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  alertType: 'alertType',
  severity: 'severity',
  title: 'title',
  description: 'description',
  message: 'message',
  isResolved: 'isResolved',
  actionRequired: 'actionRequired',
  dismissed: 'dismissed',
  dismissedAt: 'dismissedAt',
  expiresAt: 'expiresAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryAgentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  businessName: 'businessName',
  vehicleType: 'vehicleType',
  licensePlate: 'licensePlate',
  licenseNumber: 'licenseNumber',
  phoneNumber: 'phoneNumber',
  emergencyContact: 'emergencyContact',
  bankDetails: 'bankDetails',
  isVerified: 'isVerified',
  isAvailable: 'isAvailable',
  currentLocation: 'currentLocation',
  rating: 'rating',
  totalDeliveries: 'totalDeliveries',
  earnings: 'earnings',
  joinedAt: 'joinedAt',
  lastActiveAt: 'lastActiveAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShipmentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  serviceRequestId: 'serviceRequestId',
  trackingNumber: 'trackingNumber',
  status: 'status',
  shippingOption: 'shippingOption',
  estimatedDelivery: 'estimatedDelivery',
  actualDelivery: 'actualDelivery',
  pickupAddress: 'pickupAddress',
  deliveryAddress: 'deliveryAddress',
  pickupCoordinates: 'pickupCoordinates',
  deliveryCoordinates: 'deliveryCoordinates',
  currentLocation: 'currentLocation',
  recipientName: 'recipientName',
  recipientPhone: 'recipientPhone',
  deliveryNotes: 'deliveryNotes',
  packageDetails: 'packageDetails',
  deliveryFee: 'deliveryFee',
  agentId: 'agentId',
  zoneId: 'zoneId',
  assignedAt: 'assignedAt',
  pickedUpAt: 'pickedUpAt',
  deliveredAt: 'deliveredAt',
  deliveryProof: 'deliveryProof',
  rating: 'rating',
  feedback: 'feedback',
  events: 'events',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  coordinates: 'coordinates',
  baseFee: 'baseFee',
  feePerKm: 'feePerKm',
  maxDistance: 'maxDistance',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  reference: 'reference',
  userId: 'userId',
  sellerId: 'sellerId',
  orderId: 'orderId',
  serviceRequestId: 'serviceRequestId',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  status: 'status',
  provider: 'provider',
  providerRef: 'providerRef',
  description: 'description',
  escrow: 'escrow',
  escrowStatus: 'escrowStatus',
  platformCut: 'platformCut',
  sellerNet: 'sellerNet',
  processingFee: 'processingFee',
  tax: 'tax',
  metadata: 'metadata',
  paidAt: 'paidAt',
  failureReason: 'failureReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentRefundScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  amount: 'amount',
  reason: 'reason',
  status: 'status',
  providerRef: 'providerRef',
  processedBy: 'processedBy',
  requestedBy: 'requestedBy',
  approvedAt: 'approvedAt',
  completedAt: 'completedAt',
  failureReason: 'failureReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayoutScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  totalAmount: 'totalAmount',
  currency: 'currency',
  status: 'status',
  provider: 'provider',
  providerRef: 'providerRef',
  bankDetails: 'bankDetails',
  scheduledAt: 'scheduledAt',
  processedAt: 'processedAt',
  failureReason: 'failureReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayoutItemScalarFieldEnum = {
  id: 'id',
  payoutId: 'payoutId',
  paymentId: 'paymentId',
  amount: 'amount',
  commission: 'commission',
  net: 'net'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  invoiceNumber: 'invoiceNumber',
  type: 'type',
  amount: 'amount',
  tax: 'tax',
  status: 'status',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  rate: 'rate',
  category: 'category',
  region: 'region',
  isActive: 'isActive',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RevenueShareSchemeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  platformPercentage: 'platformPercentage',
  sellerPercentage: 'sellerPercentage',
  minimumFee: 'minimumFee',
  maximumFee: 'maximumFee',
  userType: 'userType',
  isActive: 'isActive',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  category: 'category',
  priority: 'priority',
  isRead: 'isRead',
  read: 'read',
  actionUrl: 'actionUrl',
  actionLabel: 'actionLabel',
  metadata: 'metadata',
  scheduledFor: 'scheduledFor',
  sentAt: 'sentAt',
  readAt: 'readAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  pushNotifications: 'pushNotifications',
  orderUpdates: 'orderUpdates',
  paymentAlerts: 'paymentAlerts',
  securityAlerts: 'securityAlerts',
  marketingEmails: 'marketingEmails',
  weeklyDigest: 'weeklyDigest',
  promotionalOffers: 'promotionalOffers',
  systemMaintenance: 'systemMaintenance',
  frequency: 'frequency',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserNotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  sms: 'sms',
  push: 'push',
  inApp: 'inApp',
  whatsapp: 'whatsapp',
  categories: 'categories',
  quietHours: 'quietHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataExportRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  requestType: 'requestType',
  status: 'status',
  dataTypes: 'dataTypes',
  format: 'format',
  downloadUrl: 'downloadUrl',
  expiresAt: 'expiresAt',
  requestedBy: 'requestedBy',
  requestedAt: 'requestedAt',
  processedAt: 'processedAt',
  completedAt: 'completedAt',
  fileSize: 'fileSize',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataDeletionRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  requestType: 'requestType',
  status: 'status',
  reason: 'reason',
  dataTypes: 'dataTypes',
  retentionPeriod: 'retentionPeriod',
  requestDate: 'requestDate',
  requestedBy: 'requestedBy',
  scheduledDate: 'scheduledDate',
  scheduledFor: 'scheduledFor',
  verificationToken: 'verificationToken',
  deletionMethod: 'deletionMethod',
  processedBy: 'processedBy',
  processedAt: 'processedAt',
  completedAt: 'completedAt',
  backupCreated: 'backupCreated',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsentRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  consentType: 'consentType',
  consentSource: 'consentSource',
  consentGiven: 'consentGiven',
  consentDate: 'consentDate',
  consentMethod: 'consentMethod',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  version: 'version',
  withdrawnAt: 'withdrawnAt',
  withdrawalReason: 'withdrawalReason',
  isActive: 'isActive',
  legalBasis: 'legalBasis',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  roomId: 'roomId',
  senderId: 'senderId',
  recipientId: 'recipientId',
  content: 'content',
  messageType: 'messageType',
  attachments: 'attachments',
  isRead: 'isRead',
  isEdited: 'isEdited',
  editedAt: 'editedAt',
  replyToId: 'replyToId',
  reactions: 'reactions',
  metadata: 'metadata',
  readAt: 'readAt',
  deliveredAt: 'deliveredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeType: 'badgeType',
  badgeName: 'badgeName',
  description: 'description',
  iconUrl: 'iconUrl',
  color: 'color',
  isActive: 'isActive',
  status: 'status',
  earnedAt: 'earnedAt',
  expiresAt: 'expiresAt',
  verifiedBy: 'verifiedBy',
  criteria: 'criteria',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EndorsementScalarFieldEnum = {
  id: 'id',
  endorserId: 'endorserId',
  endorseeId: 'endorseeId',
  endorsementType: 'endorsementType',
  category: 'category',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  description: 'description',
  isPublic: 'isPublic',
  isVerified: 'isVerified',
  verifiedBy: 'verifiedBy',
  relatedOrder: 'relatedOrder',
  helpful: 'helpful',
  reportCount: 'reportCount',
  status: 'status',
  weight: 'weight',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SocialConnectionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  platform: 'platform',
  username: 'username',
  profileUrl: 'profileUrl',
  isVerified: 'isVerified',
  isPublic: 'isPublic',
  followers: 'followers',
  following: 'following',
  lastSynced: 'lastSynced',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunityPostScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  title: 'title',
  content: 'content',
  postType: 'postType',
  category: 'category',
  tags: 'tags',
  images: 'images',
  isPublic: 'isPublic',
  isLocked: 'isLocked',
  isPinned: 'isPinned',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  commentCount: 'commentCount',
  shareCount: 'shareCount',
  reportCount: 'reportCount',
  status: 'status',
  moderatedAt: 'moderatedAt',
  moderatedBy: 'moderatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewAuthenticityScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  authenticityScore: 'authenticityScore',
  confidence: 'confidence',
  riskFactors: 'riskFactors',
  verificationMethod: 'verificationMethod',
  isAuthentic: 'isAuthentic',
  flaggedReason: 'flaggedReason',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityFindingScalarFieldEnum = {
  id: 'id',
  auditId: 'auditId',
  findingType: 'findingType',
  severity: 'severity',
  title: 'title',
  description: 'description',
  remediation: 'remediation',
  status: 'status',
  assignedTo: 'assignedTo',
  dueDate: 'dueDate',
  closedAt: 'closedAt',
  closedBy: 'closedBy',
  evidence: 'evidence',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VulnerabilityAssessmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  severity: 'severity',
  cvssScore: 'cvssScore',
  cveId: 'cveId',
  affectedSystems: 'affectedSystems',
  status: 'status',
  discoveredBy: 'discoveredBy',
  discoveredAt: 'discoveredAt',
  patchAvailable: 'patchAvailable',
  patchVersion: 'patchVersion',
  mitigationSteps: 'mitigationSteps',
  assignedTo: 'assignedTo',
  dueDate: 'dueDate',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  eventType: 'eventType',
  action: 'action',
  resource: 'resource',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  errorCode: 'errorCode',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  riskScore: 'riskScore',
  flagged: 'flagged',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.BlockedIPScalarFieldEnum = {
  id: 'id',
  ipAddress: 'ipAddress',
  reason: 'reason',
  blockedBy: 'blockedBy',
  blockedAt: 'blockedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  attempts: 'attempts',
  lastAttempt: 'lastAttempt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityScanScalarFieldEnum = {
  id: 'id',
  scanType: 'scanType',
  target: 'target',
  status: 'status',
  findings: 'findings',
  riskScore: 'riskScore',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  duration: 'duration',
  scanEngine: 'scanEngine',
  engineVersion: 'engineVersion',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  activityType: 'activityType',
  action: 'action',
  resource: 'resource',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  duration: 'duration',
  createdAt: 'createdAt'
};

exports.Prisma.EmergencyContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  relationship: 'relationship',
  phone: 'phone',
  email: 'email',
  address: 'address',
  isPrimary: 'isPrimary',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SafetySettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  locationSharing: 'locationSharing',
  meetingReminders: 'meetingReminders',
  emergencyContacts: 'emergencyContacts',
  safetyTips: 'safetyTips',
  incidentReporting: 'incidentReporting',
  riskAssessment: 'riskAssessment',
  backgroundChecks: 'backgroundChecks',
  identityVerification: 'identityVerification',
  twoFactorAuth: 'twoFactorAuth',
  loginAlerts: 'loginAlerts',
  profileVisibilityLevel: 'profileVisibilityLevel',
  allowContactFromStrangers: 'allowContactFromStrangers',
  shareLocationData: 'shareLocationData',
  emergencyModeEnabled: 'emergencyModeEnabled',
  safeWord: 'safeWord',
  safeWordEnabled: 'safeWordEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MeetingGuidelinesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  category: 'category',
  type: 'type',
  isActive: 'isActive',
  priority: 'priority',
  audience: 'audience',
  createdBy: 'createdBy',
  viewCount: 'viewCount',
  helpful: 'helpful',
  notHelpful: 'notHelpful',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrustMetricScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  metricType: 'metricType',
  value: 'value',
  maxValue: 'maxValue',
  weight: 'weight',
  lastCalculated: 'lastCalculated',
  period: 'period',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PolicyViolationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  violationType: 'violationType',
  severity: 'severity',
  status: 'status',
  description: 'description',
  evidence: 'evidence',
  reportedBy: 'reportedBy',
  reviewedBy: 'reviewedBy',
  actionTaken: 'actionTaken',
  appealStatus: 'appealStatus',
  detectedAt: 'detectedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RiskAssessmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  riskType: 'riskType',
  riskScore: 'riskScore',
  riskLevel: 'riskLevel',
  overallRisk: 'overallRisk',
  factors: 'factors',
  riskFactors: 'riskFactors',
  recommendations: 'recommendations',
  assessedBy: 'assessedBy',
  validUntil: 'validUntil',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReputationChangeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  changeType: 'changeType',
  points: 'points',
  previousScore: 'previousScore',
  newScore: 'newScore',
  delta: 'delta',
  reason: 'reason',
  source: 'source',
  relatedEntity: 'relatedEntity',
  triggeredBy: 'triggeredBy',
  timestamp: 'timestamp',
  metadata: 'metadata',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.IdentityVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  documentType: 'documentType',
  documentNumber: 'documentNumber',
  documentImages: 'documentImages',
  selfieImage: 'selfieImage',
  verificationMethod: 'verificationMethod',
  verificationType: 'verificationType',
  status: 'status',
  confidence: 'confidence',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  expiresAt: 'expiresAt',
  submittedAt: 'submittedAt',
  rejectionReason: 'rejectionReason',
  notes: 'notes',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BackgroundCheckScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  checkType: 'checkType',
  provider: 'provider',
  providerRef: 'providerRef',
  status: 'status',
  result: 'result',
  score: 'score',
  findings: 'findings',
  requestedBy: 'requestedBy',
  requestedAt: 'requestedAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt',
  cost: 'cost',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bio: 'bio',
  website: 'website',
  location: 'location',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  interests: 'interests',
  languages: 'languages',
  timezone: 'timezone',
  profilePicture: 'profilePicture',
  coverPicture: 'coverPicture',
  socialLinks: 'socialLinks',
  preferences: 'preferences',
  isPublic: 'isPublic',
  lastActiveAt: 'lastActiveAt',
  verifiedDate: 'verifiedDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentItemScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  contentType: 'contentType',
  content: 'content',
  title: 'title',
  authorId: 'authorId',
  status: 'status',
  autoModerationScore: 'autoModerationScore',
  moderatedAt: 'moderatedAt',
  isRemoved: 'isRemoved',
  isBlurred: 'isBlurred',
  visibilityRestricted: 'visibilityRestricted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentFlagScalarFieldEnum = {
  id: 'id',
  contentId: 'contentId',
  contentItemId: 'contentItemId',
  flaggedBy: 'flaggedBy',
  reason: 'reason',
  severity: 'severity',
  status: 'status',
  flagType: 'flagType',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  reviewNotes: 'reviewNotes',
  description: 'description',
  flaggedAt: 'flaggedAt'
};

exports.Prisma.ContentViolationScalarFieldEnum = {
  id: 'id',
  contentId: 'contentId',
  violationType: 'violationType',
  severity: 'severity',
  confidence: 'confidence',
  description: 'description',
  detectedAt: 'detectedAt',
  detectedBy: 'detectedBy'
};

exports.Prisma.ContentReviewScalarFieldEnum = {
  id: 'id',
  contentId: 'contentId',
  contentItemId: 'contentItemId',
  reviewerId: 'reviewerId',
  decision: 'decision',
  confidence: 'confidence',
  reasoning: 'reasoning',
  actionsTaken: 'actionsTaken',
  reviewTime: 'reviewTime',
  qualityScore: 'qualityScore',
  notes: 'notes',
  reason: 'reason',
  reviewedAt: 'reviewedAt',
  verifiedAt: 'verifiedAt'
};

exports.Prisma.DisputeEvidenceScalarFieldEnum = {
  id: 'id',
  disputeId: 'disputeId',
  submittedBy: 'submittedBy',
  evidenceType: 'evidenceType',
  title: 'title',
  description: 'description',
  fileUrls: 'fileUrls',
  createdAt: 'createdAt'
};

exports.Prisma.DisputeResolutionScalarFieldEnum = {
  id: 'id',
  disputeId: 'disputeId',
  resolvedBy: 'resolvedBy',
  resolutionType: 'resolutionType',
  outcome: 'outcome',
  description: 'description',
  compensation: 'compensation',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.MediationSessionScalarFieldEnum = {
  id: 'id',
  disputeId: 'disputeId',
  mediatorId: 'mediatorId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  sessionType: 'sessionType',
  location: 'location',
  meetingLink: 'meetingLink',
  status: 'status'
};

exports.Prisma.PushSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  endpoint: 'endpoint',
  p256dh: 'p256dh',
  auth: 'auth',
  isActive: 'isActive',
  active: 'active',
  userAgent: 'userAgent',
  deviceInfo: 'deviceInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduledNotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  category: 'category',
  title: 'title',
  message: 'message',
  scheduledFor: 'scheduledFor',
  sent: 'sent',
  sentAt: 'sentAt',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.SafetyAlertScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  alertType: 'alertType',
  type: 'type',
  title: 'title',
  message: 'message',
  description: 'description',
  severity: 'severity',
  source: 'source',
  status: 'status',
  acknowledged: 'acknowledged',
  affectedCount: 'affectedCount',
  assignedTo: 'assignedTo',
  dueDate: 'dueDate',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SafetyActionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  actionType: 'actionType',
  target: 'target',
  targetId: 'targetId',
  reason: 'reason',
  severity: 'severity',
  executedBy: 'executedBy',
  performedBy: 'performedBy',
  executedAt: 'executedAt',
  status: 'status',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  action: 'action',
  details: 'details',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.ComplianceCheckScalarFieldEnum = {
  id: 'id',
  checkType: 'checkType',
  status: 'status',
  result: 'result',
  performedAt: 'performedAt',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt'
};

exports.Prisma.FraudDetectionScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  userId: 'userId',
  fraudType: 'fraudType',
  riskScore: 'riskScore',
  riskFactors: 'riskFactors',
  status: 'status',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  actionTaken: 'actionTaken',
  detectedAt: 'detectedAt'
};

exports.Prisma.UserWarningScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contentItemId: 'contentItemId',
  reason: 'reason',
  severity: 'severity',
  issuedBy: 'issuedBy',
  issuedAt: 'issuedAt',
  acknowledged: 'acknowledged'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  PasswordReset: 'PasswordReset',
  Seller: 'Seller',
  Product: 'Product',
  Order: 'Order',
  Refund: 'Refund',
  Review: 'Review',
  Listing: 'Listing',
  Property: 'Property',
  PropertyViewing: 'PropertyViewing',
  Job: 'Job',
  JobApplication: 'JobApplication',
  ArtisanProfile: 'ArtisanProfile',
  ServiceRequest: 'ServiceRequest',
  ServiceQuote: 'ServiceQuote',
  Chat: 'Chat',
  Message: 'Message',
  LegalDocument: 'LegalDocument',
  UserConsent: 'UserConsent',
  GDPRRequest: 'GDPRRequest',
  UserPrivacySettings: 'UserPrivacySettings',
  UserVerification: 'UserVerification',
  UserSafetyProfile: 'UserSafetyProfile',
  SafetyIncident: 'SafetyIncident',
  UserReport: 'UserReport',
  SecurityAudit: 'SecurityAudit',
  SecurityIncident: 'SecurityIncident',
  AccessControl: 'AccessControl',
  Dispute: 'Dispute',
  DisputeMessage: 'DisputeMessage',
  DisputeMediation: 'DisputeMediation',
  ContentModeration: 'ContentModeration',
  ModerationRule: 'ModerationRule',
  ModerationQueue: 'ModerationQueue',
  UserTrustProfile: 'UserTrustProfile',
  UserEndorsement: 'UserEndorsement',
  TrustAlert: 'TrustAlert',
  DeliveryAgent: 'DeliveryAgent',
  Shipment: 'Shipment',
  DeliveryZone: 'DeliveryZone',
  Payment: 'Payment',
  PaymentRefund: 'PaymentRefund',
  Payout: 'Payout',
  PayoutItem: 'PayoutItem',
  Invoice: 'Invoice',
  TaxRule: 'TaxRule',
  RevenueShareScheme: 'RevenueShareScheme',
  Notification: 'Notification',
  NotificationPreference: 'NotificationPreference',
  UserNotificationPreference: 'UserNotificationPreference',
  DataExportRequest: 'DataExportRequest',
  DataDeletionRequest: 'DataDeletionRequest',
  ConsentRecord: 'ConsentRecord',
  ChatMessage: 'ChatMessage',
  VerificationBadge: 'VerificationBadge',
  Endorsement: 'Endorsement',
  SocialConnection: 'SocialConnection',
  CommunityPost: 'CommunityPost',
  ReviewAuthenticity: 'ReviewAuthenticity',
  SecurityFinding: 'SecurityFinding',
  VulnerabilityAssessment: 'VulnerabilityAssessment',
  SecurityLog: 'SecurityLog',
  BlockedIP: 'BlockedIP',
  SecurityScan: 'SecurityScan',
  UserActivity: 'UserActivity',
  EmergencyContact: 'EmergencyContact',
  SafetySettings: 'SafetySettings',
  MeetingGuidelines: 'MeetingGuidelines',
  TrustMetric: 'TrustMetric',
  PolicyViolation: 'PolicyViolation',
  RiskAssessment: 'RiskAssessment',
  ReputationChange: 'ReputationChange',
  IdentityVerification: 'IdentityVerification',
  BackgroundCheck: 'BackgroundCheck',
  UserProfile: 'UserProfile',
  ContentItem: 'ContentItem',
  ContentFlag: 'ContentFlag',
  ContentViolation: 'ContentViolation',
  ContentReview: 'ContentReview',
  DisputeEvidence: 'DisputeEvidence',
  DisputeResolution: 'DisputeResolution',
  MediationSession: 'MediationSession',
  PushSubscription: 'PushSubscription',
  ScheduledNotification: 'ScheduledNotification',
  SafetyAlert: 'SafetyAlert',
  SafetyAction: 'SafetyAction',
  ActivityLog: 'ActivityLog',
  ComplianceCheck: 'ComplianceCheck',
  FraudDetection: 'FraudDetection',
  UserWarning: 'UserWarning'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
